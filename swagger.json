{
  "swagger": "2.0",
  "info": {
    "description": "for project Sop",
    "version": "1.0.0",
    "title": "Swagger Oder Module",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "ordermodule.herokuapp.com",
  "tags": [
    {
      "name": "orders",
      "description": "Everything about your order"
    },
    {
      "name": "orders_products",
      "description": "Access to e-comstore orders"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/createOrder": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Add order to the store",
        "description": "",
        "operationId": "addorder",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "order_auth": [
              "write:orders",
              "read:orders"
            ]
          }
        ]
      }
    },
    "/updateOrder": {
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Update an existing orders",
        "description": "",
        "operationId": "updateorder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "order not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/updateCancell/{id}": {
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Update an Status orders cancel",
        "description": "",
        "operationId": "updateStatusorder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Update Success"
          }
        }
      }
    },
    "/updateSuccess/{id}": {
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Update an Status orders Success",
        "description": "",
        "operationId": "updateStatusSuccessOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Update Success"
          }
        },
        "security": [
          {
            "order_auth": [
              "write:orders",
              "read:orders"
            ]
          }
        ]
      }
    },
    "/getUserOrder/{user_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "get orders by userId filter",
        "description": "",
        "operationId": "get order by user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User id need to find",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "return order",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Orders"
              }
            }
          },
          "400": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/findByStatus/{status}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Finds order by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "order_auth": [
              "write:orders",
              "read:orders"
            ]
          }
        ]
      }
    },
    "/getOrderDetails/{id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Find orderdetail by order ID",
        "description": "Returns a single order",
        "operationId": "getorderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "order not found"
          }
        }
      }
    },
    "/deleteOrder/{id}": {
      "delete": {
        "tags": [
          "orders"
        ],
        "summary": "Deletes a order",
        "description": "",
        "operationId": "deletePet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "order id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "order_auth": [
              "write:orders",
              "read:orders"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "order_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://ordermodule-325b1.firebaseio.com",
      "flow": "implicit",
      "scopes": {
        "write:orders": "modify",
        "read:orders": "read"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "AIzaSyB4IcqMtwaOLyhDGkNZL5by1W-osIPpNbo",
      "in": "query"
    }
  },
  "definitions": {
    "Orders": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          }
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "success",
            "Waiting",
            "cancelled"
          ]
        }
      },
      "xml": {
        "name": "Orders"
      }
    },
    "product": {
      "type": "object",
      "properties": {
        "price": {
          "type": "integer"
        },
        "product_id": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "amount": {
          "type": "integer"
        },
        "shop_id": {
          "type": "integer"
        },
        "shipping_option_id": {
          "type": "string"
        },
        "option_id": {
          "type": "integer"
        },
        "special_name": {
          "type": "string"
        }
      }
    },
    "address": {
      "type": "object",
      "properties": {
        "address_id": {
          "type": "integer"
        },
        "district": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "road": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "sub_disctrict": {
          "type": "string"
        }
      }
    }
  }
}